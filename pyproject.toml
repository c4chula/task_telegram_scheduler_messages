[project]
name = "tg_assistant"
version = "0.0.1"
description = "Telegram Assistant which sends messages to client"
authors = [
    {name = "c4chula", email = "henry.foster71@yahoo.com"},
]
dependencies = [
    "sqlalchemy>=2.0.23",
    "pyrogram>=2.0.106",
    "loguru>=0.7.2",
    "aiosqlite>=0.19.0",
    "alembic>=1.13.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.2",
    "tgcrypto>=1.2.5",
    "uvloop>=0.19.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "pytest>=7.4.3",
    "black>=23.11.0",
]

[tool.pdm.scripts]
start = "python src/tg_assistant/app.py"

[tool.ruff]
line-length = 120
select = [
    "F",        # pyflakes
    "E",        # pycodestyle errors
    "W",        # pycodestyle warnings
    "C90",      # mccabe
    "I",        # isort
    "N",        # pep8-naming
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
    "S",        # flake8-bandit
    "BLE",      # flake8-blind-except
    "FBT003",   # flake8-boolean-trap
    "B",        # flake8-bugbear
    "A",        # flake8-builtins
    "COM",      # flake8-commas
    "C4",       # flake8-comprehensions
    "T10",      # flake8-debugger
    "ISC",      # flake8-implicit-str-concat
    "G010",     # Logging statement uses warn instead of warning
    "G201",     # Logging .exception(...) should be used instead of .error(..., exc_info=True)
    "G202",     # Logging statement has redundant exc_info
    "INP",      # flake8-no-pep420
    "PIE",      # flake8-pie
    "T20",      # flake8-print
    "PYI",      # flake8-pyi
    "PT",       # flake8-pytest-style
    "Q",        # flake8-quotes
    "RSE",      # flake8-raise
    "RET",      # flake8-return
    "SIM",      # flake8-simplify
    "TCH",      # flake8-type-checking
    "ARG",      # flake8-unused-arguments
    "PTH",      # flake8-use-pathlib
    "TD",       # flake8-todos
    "ERA",      # flake8-eradicate
    "PGH",      # pygrep-hooks
    "PLC0414",  # Import alias does not rename original package 
    "PLE",      # Error
    "PLW",      # Warning
    "TRY",      # tryceratops
    "FLY",      # flynt
    "RUF",      # ruff-specific rules
    "ANN001",   # missing type annotation for arguments
    "ANN002",   # missing type annotation for *args
    "ANN003",   # missing type annotation for **kwargs
]
unfixable = [
    "ERA001",   # eradicate: found commented out code (can be dangerous if fixed automatically)
]
ignore = [
    "A002",   # builtin shadowing in arguments
    "A003",   # builtin shadowing in attributes
    "D203",   # 1 blank line required before class docstring
    "TD002",  # Missing author in TODO; try: `# TODO(<author_name>): ...`
    "ARG002", # Unused method argument
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Consider moving statement into the else clause
    "ARG001", # Unused first argument
    "ARG005", # Unused lambda argument
    "PT019",  # Fixture without value is injected as parameter, use @pytest.mark.usefixtures instead
    "SIM108"  # Use ternary operator instead of if-else block (ternaries lie to coverage)
]
extend-exclude = ["migrations"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S",        # ignore bandit security issues in tests
    "B018",     # ignore useless expressions in tests
    "PT012",    # ignore complex with pytest.raises clauses
]
